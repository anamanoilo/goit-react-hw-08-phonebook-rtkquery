{"version":3,"file":"static/js/Register.4f3cf39c.chunk.js","mappings":"qPACA,EAAuB,uBAAvB,EAAsD,wBAAtD,EAAsF,wB,SCwItF,EA9HiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAClB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAGIC,EAAAA,EAAAA,MAHJ,eACEC,EADF,YAEUC,EAFV,EAEIC,KAAwBC,EAF5B,EAEqBC,MAA8BC,EAFnD,EAEwCC,UAExC,GAGIC,EAAAA,EAAAA,MAHJ,eACEC,EADF,YAEUC,EAFV,EAEIP,KAA2BQ,EAF/B,EAEwBN,MAAiCO,EAFzD,EAE8CL,UAExCM,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,OAAIb,QAAJ,IAAIA,GAAAA,EAAWc,MACbH,EAASI,EAAAA,EAAAA,QAAAA,cAAgCf,MAE1C,CAACA,EAAWW,KAEfE,EAAAA,EAAAA,YAAU,WACR,OAAIL,QAAJ,IAAIA,GAAAA,EAAcM,MAChBH,EAASI,EAAAA,EAAAA,QAAAA,iBAAmCP,MAE7C,CAACA,EAAcG,KAElBE,EAAAA,EAAAA,YAAU,WACsB,OAAb,OAAbJ,QAAa,IAAbA,OAAA,EAAAA,EAAeO,SACjBC,EAAAA,GAAAA,MAAY,4CAEVf,GAAwC,OAAb,OAAbO,QAAa,IAAbA,OAAA,EAAAA,EAAeO,UAC/BC,EAAAA,GAAAA,MACE,iEAGH,CAACf,EAAYO,KAEhBI,EAAAA,EAAAA,YAAU,YACJT,GAAgBM,IAClBQ,MAED,CAACd,EAAcM,IAElB,IAAMS,EAAgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACfC,EAAgBD,EAAhBC,MACR,OADwBD,EAAT5B,MAEb,IAAK,OAEH,YADAC,EAAQ4B,GAEV,IAAK,QAEH,YADA1B,EAAS0B,GAEX,IAAK,WAEH,YADAxB,EAAYwB,GAEd,QACE,SAIAH,EAAQ,WACZzB,EAAQ,IACRE,EAAS,IACTE,EAAY,KAGRyB,EAAe,SAACC,EAAGjC,GACvBiC,EAAEC,iBACW,aAATlC,GACFiB,EAAa,CAAEf,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,IAEjB,UAATN,GACFS,EAAU,CAAEL,MAAAA,EAAOE,SAAAA,KAIvB,OACE,kBAAM6B,UAAWC,EAAQC,SAAU,SAAAJ,GAAC,OAAID,EAAaC,EAAGjC,IAAxD,UACY,aAATA,GACC,mBAAOmC,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACXpC,KAAK,OACLE,KAAK,OACLoC,UAAQ,EACRC,aAAa,MACbC,SAAUX,EACVE,MAAO7B,OAGT,MAEJ,mBAAOiC,UAAWC,EAAlB,mBAEE,kBACED,UAAWC,EACXpC,KAAK,QACLE,KAAK,QACLoC,UAAQ,EACRC,aAAa,MACbC,SAAUX,EACVE,MAAO3B,QAGX,mBAAO+B,UAAWC,EAAlB,sBAEE,kBACED,UAAWC,EACXpC,KAAK,WACLE,KAAK,WACLoC,UAAQ,EACRC,aAAa,MACbC,SAAUX,EACVE,MAAOzB,QAGX,SAACmC,EAAA,EAAD,CACEzC,KAAK,SACL0C,MAAgB,aAAT1C,EAAsB,UAAY,SACzC2C,QAAS,SAAAV,GAAC,OAAID,EAAaC,EAAGjC,W,mDC3HtC,UAJiB,WACf,OAAO,SAAC,IAAD,CAAUA,KAAK","sources":["webpack://goit-react-hw-08-phonebook/./src/components/AuthForm/AuthForm.module.css?9658","components/AuthForm/AuthForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthForm_form__N+Fyz\",\"label\":\"AuthForm_label__-RWhN\",\"input\":\"AuthForm_input__dB7h2\"};","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  useRegisterUserMutation,\n  useLoginUserMutation,\n} from 'services/phonebookApi';\nimport authSlice from 'redux/phonebook/auth-slice';\nimport Button from 'components/Button';\nimport { toast } from 'react-toastify';\nimport s from './AuthForm.module.css';\n\nconst AuthForm = ({ type }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [\n    loginUser,\n    { data: loginData, error: loginError, isSuccess: loginSuccess },\n  ] = useLoginUserMutation();\n  const [\n    registerUser,\n    { data: registerData, error: registerError, isSuccess: registerSuccess },\n  ] = useRegisterUserMutation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (loginData?.user) {\n      dispatch(authSlice.actions.saveLoginData(loginData));\n    }\n  }, [loginData, dispatch]);\n\n  useEffect(() => {\n    if (registerData?.user) {\n      dispatch(authSlice.actions.saveRegisterData(registerData));\n    }\n  }, [registerData, dispatch]);\n\n  useEffect(() => {\n    if (registerError?.status === 500) {\n      toast.error('Something went wrong. Please try again.');\n    }\n    if (loginError || registerError?.status === 400) {\n      toast.error(\n        'Something went wrong. Please check your data and try again.'\n      );\n    }\n  }, [loginError, registerError]);\n\n  useEffect(() => {\n    if (loginSuccess || registerSuccess) {\n      reset();\n    }\n  }, [loginSuccess, registerSuccess]);\n\n  const onChangeInput = ({ target }) => {\n    const { value, name } = target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        return;\n      case 'email':\n        setEmail(value);\n        return;\n      case 'password':\n        setPassword(value);\n        return;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const onAuthSubmit = (e, type) => {\n    e.preventDefault();\n    if (type === 'register') {\n      registerUser({ name, email, password });\n    }\n    if (type === 'login') {\n      loginUser({ email, password });\n    }\n  };\n\n  return (\n    <form className={s.form} onSubmit={e => onAuthSubmit(e, type)}>\n      {type === 'register' ? (\n        <label className={s.label}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            required\n            autoComplete=\"off\"\n            onChange={onChangeInput}\n            value={name}\n          />\n        </label>\n      ) : null}\n\n      <label className={s.label}>\n        Email\n        <input\n          className={s.input}\n          type=\"email\"\n          name=\"email\"\n          required\n          autoComplete=\"off\"\n          onChange={onChangeInput}\n          value={email}\n        />\n      </label>\n      <label className={s.label}>\n        Password\n        <input\n          className={s.input}\n          type=\"password\"\n          name=\"password\"\n          required\n          autoComplete=\"off\"\n          onChange={onChangeInput}\n          value={password}\n        />\n      </label>\n      <Button\n        type=\"submit\"\n        label={type === 'register' ? 'Sign Up' : 'Log In'}\n        onClick={e => onAuthSubmit(e, type)}\n      />\n    </form>\n  );\n};\n\nexport default AuthForm;\n","// import s from './Register.module.css';\nimport AuthForm from 'components/AuthForm/AuthForm';\n// import Loader from 'components/Loader';\n\nconst Register = () => {\n  return <AuthForm type=\"register\" />;\n};\n\nexport default Register;\n"],"names":["type","useState","name","setName","email","setEmail","password","setPassword","useLoginUserMutation","loginUser","loginData","data","loginError","error","loginSuccess","isSuccess","useRegisterUserMutation","registerUser","registerData","registerError","registerSuccess","dispatch","useDispatch","useEffect","user","authSlice","status","toast","reset","onChangeInput","target","value","onAuthSubmit","e","preventDefault","className","s","onSubmit","required","autoComplete","onChange","Button","label","onClick"],"sourceRoot":""}